/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import dao.LoginDAO;
import dto.ArmorDTO;
import dto.ArmorInterface;
import dto.ArmorTableModel;
import java.awt.CardLayout;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author PC
 */
public class Client extends javax.swing.JFrame {
    ArmorInterface ai;
    LoginDAO login;
    ArmorTableModel<ArmorDTO> armorModel;
    ArmorTableModel<ArmorDTO> searchModel;
    boolean addNew = false;
    boolean search = false;
    /**
     * Creates new form Main
     */
    public Client() {
        initComponents();
        login = new LoginDAO();                 
        try 
        {
            ai = (ArmorInterface) Naming.lookup("rmi://localhost:1111/ArmorService");
//            ai = (ArmorInterface) Naming.lookup("rmi://192.168.1.46:1098/ArmorManagement");
        } 
        catch (NotBoundException | MalformedURLException | RemoteException ex) 
        {
            JOptionPane.showMessageDialog(this, "Server is not started!!!");
            System.exit(0);
        }
        int[] armorTableIndexes = {0, 1, 4, 5};
        String[] armorTableHeaders = {"ID", "Classification", "TimeOfCreate", "Defense"};
        armorModel = new ArmorTableModel<ArmorDTO>(armorTableHeaders, armorTableIndexes);
        searchModel = new ArmorTableModel<ArmorDTO>(armorTableHeaders, armorTableIndexes);
        this.tblArmor.setModel(armorModel);
        ///
        btnCreate.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnRemove.setEnabled(false);
        btnGetAll.setEnabled(false);
        /////
        txtClassification.setEnabled(false);
        txtTimeOfCreate.setEnabled(false);
        txtDefense.setEnabled(false);
        txtDescription.setEnabled(false);
        txtStatus.setEnabled(false);
        txtUser.setText("khanh");
        txtPassword.setText("123");
        ///
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Login = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtUser = new javax.swing.JTextField();
        txtPassword = new javax.swing.JPasswordField();
        btnLogin = new javax.swing.JButton();
        MainForm = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblArmor = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        txtId = new javax.swing.JTextField();
        txtClassification = new javax.swing.JTextField();
        txtTimeOfCreate = new javax.swing.JTextField();
        txtDefense = new javax.swing.JTextField();
        txtStatus = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        btnFind = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        btnNew = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        btnGetAll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel3.setText("LOG-IN");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("User:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Password:");

        btnLogin.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnLogin.setText("Log-in");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LoginLayout = new javax.swing.GroupLayout(Login);
        Login.setLayout(LoginLayout);
        LoginLayout.setHorizontalGroup(
            LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginLayout.createSequentialGroup()
                        .addGroup(LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(LoginLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(97, 97, 97)
                                .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(LoginLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(331, 331, 331))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginLayout.createSequentialGroup()
                        .addComponent(btnLogin)
                        .addGap(423, 423, 423))))
            .addGroup(LoginLayout.createSequentialGroup()
                .addGap(392, 392, 392)
                .addComponent(jLabel3)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        LoginLayout.setVerticalGroup(
            LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoginLayout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addComponent(jLabel3)
                .addGap(35, 35, 35)
                .addGroup(LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addComponent(btnLogin)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(Login, "card3");

        tblArmor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblArmor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblArmorMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblArmor);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Details:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 14))); // NOI18N

        txtDescription.setColumns(20);
        txtDescription.setLineWrap(true);
        txtDescription.setRows(5);
        jScrollPane2.setViewportView(txtDescription);

        btnFind.setText("Find Armor ID");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("ArmorID:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Classification:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("TimeOfCreate:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Defense:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Description:");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("Status:");

        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel7)
                        .addComponent(jLabel8)
                        .addComponent(jLabel9)
                        .addComponent(jLabel10)
                        .addComponent(jLabel11)
                        .addComponent(jLabel12))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnNew)
                        .addGap(41, 41, 41)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtClassification, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTimeOfCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDefense, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnFind))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnCreate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnUpdate))
                            .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addComponent(btnRemove)))
                .addGap(46, 46, 46))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFind)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtClassification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTimeOfCreate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDefense, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate)
                    .addComponent(btnUpdate)
                    .addComponent(btnRemove)
                    .addComponent(btnNew))
                .addGap(40, 40, 40))
        );

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("ARMOR MANAGER");

        btnGetAll.setText("Get All Armor");
        btnGetAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MainFormLayout = new javax.swing.GroupLayout(MainForm);
        MainForm.setLayout(MainFormLayout);
        MainFormLayout.setHorizontalGroup(
            MainFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MainFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainFormLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(MainFormLayout.createSequentialGroup()
                        .addGroup(MainFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(MainFormLayout.createSequentialGroup()
                                .addGap(178, 178, 178)
                                .addComponent(btnGetAll)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, Short.MAX_VALUE)))
                .addContainerGap())
        );
        MainFormLayout.setVerticalGroup(
            MainFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainFormLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MainFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainFormLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnGetAll))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(MainForm, "card4");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        if(login.checkLogin(this.txtUser.getText().trim(), this.txtPassword.getText().trim()))
        {
            changePanel("card4");
            List<ArmorDTO> list = new Vector<>();
            try 
            {
                list = ai.findAllArmor();
                if(list != null)
                { 
                    armorModel.setArmorData((Vector<ArmorDTO>) list);
                    tblArmor.updateUI();
                }
            } 
            catch (RemoteException ex) 
            {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
            JOptionPane.showMessageDialog(this, "Login failed!!!");
    }//GEN-LAST:event_btnLoginActionPerformed

    private void tblArmorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblArmorMouseClicked
        addNew = false;
        int pos = tblArmor.getSelectedRow();
        ArmorDTO curArmor = null;
        try 
        {   
            if(search==false)
                curArmor = ai.findByArmorID(armorModel.getArmorData().get(pos).getArmorId());
            else
                curArmor = ai.findByArmorID(searchModel.getArmorData().get(pos).getArmorId());
            txtId.setText(curArmor.getArmorId());
            txtClassification.setText(curArmor.getClassification());
            txtDescription.setText(curArmor.getDescription());
            txtStatus.setText(curArmor.getStatus());
            txtTimeOfCreate.setText(curArmor.getTimeOfCreate().toString());
            txtDefense.setText(curArmor.getDefense()+"");
        } 
        catch (RemoteException ex) 
        {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
        /////
        btnFind.setEnabled(false);
        btnUpdate.setEnabled(true);
        btnRemove.setEnabled(true);
        /////
        txtId.setEnabled(false);
        txtClassification.setEnabled(true);
        txtDefense.setEnabled(true);
        txtDescription.setEnabled(true);
        txtStatus.setEnabled(true);
        
    }//GEN-LAST:event_tblArmorMouseClicked

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
//        addNew = true;
        txtId.setText("");
        txtClassification.setText("");
        txtDescription.setText("");
        txtStatus.setText("");
        txtTimeOfCreate.setText("Time is automatically create");
        txtDefense.setText("");
        ///
        btnCreate.setEnabled(true);
        btnFind.setEnabled(true);
        btnUpdate.setEnabled(false);
        btnRemove.setEnabled(false);
        btnGetAll.setEnabled(false);
        /////
        txtId.setEnabled(true);
        txtClassification.setEnabled(true);
        txtDefense.setEnabled(true);
        txtDescription.setEnabled(true);
        txtStatus.setEnabled(true);
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        addNew = true;
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
        String id = txtId.getText().toUpperCase().trim();
        String classification = txtClassification.getText().trim();
        String description = txtDescription.getText();
        Date timeOfCreate = new Date();
        String status = txtStatus.getText().trim();
        String defense = txtDefense.getText().trim();
        if(!checkData())
            return;
        ArmorDTO dto = new ArmorDTO(id, classification, description, status, timeOfCreate, Integer.parseInt(defense));
        try {
            boolean check = ai.createArmor(dto);
            if(check==true)
            {
                JOptionPane.showMessageDialog(this, "Create successfully!!!");
                armorModel.getArmorData().add(dto);
                this.tblArmor.setModel(armorModel);
                tblArmor.updateUI();
            }
            else
                JOptionPane.showMessageDialog(this, "Create failed!!!");
        } catch (RemoteException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
//        addNew = false;
///
        btnFind.setEnabled(true);
        btnCreate.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnRemove.setEnabled(false);
        btnGetAll.setEnabled(false);
        /////
        txtClassification.setEnabled(false);
        txtDefense.setEnabled(false);
        txtDescription.setEnabled(false);
        txtStatus.setEnabled(false);
        /////
        txtId.setText("");
        txtClassification.setText("");
        txtDescription.setText("");
        txtStatus.setText("");
        txtTimeOfCreate.setText("");
        txtDefense.setText("");
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnGetAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetAllActionPerformed
        List<ArmorDTO> list = new Vector<>();
        try 
        {
            list = ai.findAllArmor();
            armorModel.setArmorData((Vector<ArmorDTO>) list);
            tblArmor.setModel(armorModel);
            tblArmor.updateUI();
        } 
        catch (RemoteException ex) 
        {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
        ///
        btnFind.setEnabled(true);
        btnCreate.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnRemove.setEnabled(false);
        btnGetAll.setEnabled(false);
        /////
        txtId.setEnabled(true);
        txtClassification.setEnabled(false);
        txtDefense.setEnabled(false);
        txtDescription.setEnabled(false);
        txtStatus.setEnabled(false);
        search = false;
        /////
        txtId.setText("");
        txtClassification.setText("");
        txtDescription.setText("");
        txtStatus.setText("");
        txtTimeOfCreate.setText("");
        txtDefense.setText("");
    }//GEN-LAST:event_btnGetAllActionPerformed

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        String id = txtId.getText().toUpperCase().trim();
        List<ArmorDTO> resultList = new Vector<>();
        try 
        {
            for(ArmorDTO armor : ai.findAllArmor())
            {
                if(armor.getArmorId().toUpperCase().contains(id))
                    resultList.add(armor);
            }
            
        }
        catch (RemoteException ex) 
        {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
        searchModel.setArmorData((Vector<ArmorDTO>) resultList);
        tblArmor.setModel(searchModel);
        tblArmor.updateUI();
        /////
        btnFind.setEnabled(true);
        btnCreate.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnRemove.setEnabled(false);
        btnGetAll.setEnabled(true);
        /////
        txtId.setEnabled(true);
        txtClassification.setEnabled(false);
        txtDefense.setEnabled(false);
        txtDescription.setEnabled(false);
        txtStatus.setEnabled(false);
        search = true;
    }//GEN-LAST:event_btnFindActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
        String id = txtId.getText().toUpperCase().trim();
        String classification = txtClassification.getText().trim();
        String description = txtDescription.getText();
        Date timeOfCreate = null;
        try 
        {
            timeOfCreate = simpleDateFormat.parse(txtTimeOfCreate.getText());
        }
        catch (ParseException ex) 
        {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
        String status = txtStatus.getText().trim();
        String defense = txtDefense.getText().trim();
        if(!checkData())
            return;
        ArmorDTO updateArmor = new ArmorDTO(id, classification, description, status, timeOfCreate, Integer.parseInt(defense));
        List<ArmorDTO> updateList = new Vector<>();
        try 
        {
            ai.updateArmor(updateArmor);
            updateList = ai.findAllArmor();
        } catch (RemoteException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
        armorModel.setArmorData((Vector<ArmorDTO>) updateList);
        tblArmor.setModel(armorModel);
        tblArmor.updateUI();
        /////
        btnFind.setEnabled(true);
        btnCreate.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnRemove.setEnabled(false);
        btnGetAll.setEnabled(false);
        /////
        txtId.setEnabled(true);
        txtClassification.setEnabled(false);
        txtDefense.setEnabled(false);
        txtDescription.setEnabled(false);
        txtStatus.setEnabled(false);
        /////
        txtId.setText("");
        txtClassification.setText("");
        txtDescription.setText("");
        txtStatus.setText("");
        txtTimeOfCreate.setText("");
        txtDefense.setText("");
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        String id = txtId.getText().trim().toUpperCase();
        List<ArmorDTO> deleteList = new Vector<>();
        try 
        {
            ai.removeArmor(id);
            deleteList = ai.findAllArmor();
        } 
        catch (RemoteException ex) 
        {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
        armorModel.setArmorData((Vector<ArmorDTO>) deleteList);
        tblArmor.setModel(armorModel);
        tblArmor.updateUI();
        /////btnFind.setEnabled(true);
        btnCreate.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnRemove.setEnabled(false);
        btnGetAll.setEnabled(false);
        /////
        txtId.setEnabled(true);
        txtClassification.setEnabled(false);
        txtDefense.setEnabled(false);
        txtDescription.setEnabled(false);
        txtStatus.setEnabled(false);
        /////
        txtId.setText("");
        txtClassification.setText("");
        txtDescription.setText("");
        txtStatus.setText("");
        txtTimeOfCreate.setText("");
        txtDefense.setText("");
    }//GEN-LAST:event_btnRemoveActionPerformed
    
    public void changePanel(String panel)
    {
        CardLayout c = (CardLayout) getContentPane().getLayout();
        c.show(getContentPane(), panel);
    }
    
    public boolean checkData()
    {
        List<ArmorDTO> list = null;
        String s = "";
        if(addNew == true)
        {
            s = txtId.getText().trim().toUpperCase();
            try 
            {
                list = ai.findAllArmor();
            }
            catch (RemoteException ex) 
            {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
            for(int i=0; i<list.size(); i++)
            {
                if(s.equalsIgnoreCase(list.get(i).getArmorId()))
                {
                    JOptionPane.showMessageDialog(null, "This ID is exist!");
                    return false;
                }
            }
            if(s.length()==0 || s.length()>10)
            {
                JOptionPane.showMessageDialog(null, "ID must be not null or less than 10 character!");
                return false;
            }
            if(!s.matches("\\w{1,10}$"))
            {
                JOptionPane.showMessageDialog(null, "ID can not contain special character!");
                return false;
            }
        }
        s = txtClassification.getText().trim();
        if(s.length()==0 || s.length()>30)
        {
            JOptionPane.showMessageDialog(null, "Classification must be not null or less than 30 character!");
                return false;
        }
        s = txtDescription.getText().trim();
        if(s.length()==0 || s.length()>300)
        {
            JOptionPane.showMessageDialog(null, "Description must be not null or less than 300 character!");
            return false;
        }
        s = txtStatus.getText().trim();
        if(s.length()==0 || s.length()>30)
        {
            JOptionPane.showMessageDialog(null, "Status must be not null or less than 300 character!");
            return false;
        }
        s = txtDefense.getText().trim();
        if(!s.matches("^\\d+$"))
        {
            JOptionPane.showMessageDialog(null, "Defense must be a number!");
            return false;
        }
        if(Integer.parseInt(s)==0)
        {
            JOptionPane.showMessageDialog(null, "Defense must be greater than 0!");
            return false;
        }
        return true;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Login;
    private javax.swing.JPanel MainForm;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnGetAll;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblArmor;
    private javax.swing.JTextField txtClassification;
    private javax.swing.JTextField txtDefense;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtId;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtStatus;
    private javax.swing.JTextField txtTimeOfCreate;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables
}
